<?php// src/Triv/ForumBundle/Controller/ForumController.phpnamespace Triv\ForumBundle\Controller;use Triv\ForumBundle\Entity\Forum;use Triv\ForumBundle\Entity\ForumImage;use Triv\CoreBundle\Entity\Vote;use Triv\ForumBundle\Entity\Commentaire;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;use Triv\ForumBundle\Form\ForumType;use Triv\ForumBundle\Form\ForumEditType;use Triv\ForumBundle\Form\CommentaireType;use Symfony\Component\Security\Core\Exception\AccessDeniedException;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;class ForumController extends Controller{        public function indexAction($page)  {    if ($page < 1) {      throw $this->createNotFoundException("La page ".$page." n'existe pas.");    }    // Ici je fixe le nombre d'annonces par page à 3    // Mais bien sûr il faudrait utiliser un paramètre, et y accéder via $this->container->getParameter('nb_per_page')    $nbPerPage = $this->container->getParameter('nb_per_page');    // On récupère notre objet Paginator    $listAdverts = $this->getDoctrine()      ->getManager()      ->getRepository('TrivForumBundle:Forum')      ->getForums($page, $nbPerPage)    ;    // On calcule le nombre total de pages grâce au count($listAdverts) qui retourne le nombre total d'annonces    $nbPages = ceil(count($listAdverts)/$nbPerPage);    // Si la page n'existe pas, on retourne une 404    if ($page > $nbPages) {     	   return $this->redirect($this->generateUrl('Triv_forum_add'));    }    // On donne toutes les informations nécessaires à la vue    return $this->render('TrivForumBundle:Forum:index.html.twig', array(      'listAdverts' => $listAdverts,      'nbPages'     => $nbPages,      'page'        => $page    ));  }      public function viewAction($id, Request $request)  {         $application = new Commentaire();	$typ = null;	    $form = $this->createForm(new CommentaireType(), $application);	$user = $this->getUser();	$em = $this->getDoctrine()->getManager();		// utilisateur actuel a vote pour le forum?    $vote = false;	if(null !==($request->getSession('user_id'))){		$choix = $em->getRepository('TrivCoreBundle:Vote')->findoneBy(array('ref' => 'forum','refId' => $id,'userId' => $user->getId())	);	}    	  if(null !==$choix){		$vote = $choix->getVote();	  //retourne la classe is-liked ou is-disliked	  $typ = $this->getClass($vote);	  	  }   	    // On récupère l'EntityManager    $em = $this->getDoctrine()->getManager();    // Pour récupérer une annonce unique : on utilise find()    $advert = $em->getRepository('TrivForumBundle:Forum')->find($id);    // On vérifie que l'annonce avec cet id existe bien    if ($advert === null) {      throw $this->createNotFoundException("L'annonce d'id ".$id." n'existe pas.");    }	$user_id = $this->getUser()->getId();  if ($form->handleRequest($request)->isValid()) {	  $user = $this->getUser();	  $application->setAuthor($user);	  $application->setUser($user);	  $application->setAdvert($advert);      $em = $this->getDoctrine()->getManager();      $em->persist($application);      $em->flush();	        return $this->redirect($this->generateUrl('Triv_Forum_view', array('id' => $advert->getId())));    }	   if ($advert->getLikeCount()+ $advert->getDisLikeCount() == 0) {	       $percent = 100;	   }	   else{	      $percent =  round(100 *($advert->getLikeCount()/ ($advert->getLikeCount()+ $advert->getDisLikeCount() )));	   } 			       $repositoryApp = $this               ->getDoctrine()               ->getManager()               ->getRepository('TrivForumBundle:Commentaire')  ;	 	 $listApplications = $repositoryApp->findBy(		array('advert' => $advert),      // Critere		array('date' => 'desc')          // Tri);    // Puis modifiez la ligne du render comme ceci, pour prendre en compte les variables :    return $this->render('TrivForumBundle:Forum:view.html.twig', array(	  'user_id'          => $user_id,       'advert'           => $advert,	  'form'             => $form->createView(),	  'listApplications' =>$listApplications,	  'percent'          =>$percent,         'vote'            =>$vote,       'typ'            =>$typ,	       ));		  }    /**   * @Security("has_role('ROLE_USER')")   */  public function addAction(Request $request)   {          $advert = new Forum();   $form = $this->createForm(new ForumType(), $advert);    if ($form->handleRequest($request)->isValid()) {	 	        $em = $this->getDoctrine()->getManager();	  $user = $this->getUser();	  $advert->setAuthor($user);	  $advert->setUser($user);      $em->persist($advert);      $em->flush();      $request->getSession()->getFlashBag()->add('notice', 'Post bien enregistrée.');      return $this->redirect($this->generateUrl('Triv_Forum_view', array('id' => $advert->getId())));    }    return $this->render('TrivForumBundle:Forum:add.html.twig', array(      'form' => $form->createView(),    ));  }        /**   * @Security("has_role('ROLE_USER')")   */  public function deleteAction($id, Request $request){         $em = $this->getDoctrine()->getManager();          // On récupère l'annonce $id		$advert = $em->getRepository('TrivForumBundle:Forum')->find($id);		if (null === $advert) {			throw new NotFoundHttpException("L'annonce d'id ".$id." n'existe pas.");		}				if( ($this->getUser() == $advert->getUser()) or ($this->get('security.context')->isGranted('ROLE_AUTEUR')))		{		// On crée un formulaire vide, qui ne contiendra que le champ CSRF		// Cela permet de protéger la suppression d'annonce contre cette faille		$form = $this->createFormBuilder()->getForm();		if ($form->handleRequest($request)->isValid()) {			$em->remove($advert);			$em->flush();			$request->getSession()->getFlashBag()->add('info', "Le post a bien été supprimée.");			return $this->redirect($this->generateUrl('triv_forum_home'));		}		// Si la requête est en GET, on affiche une page de confirmation avant de supprimer		return $this->render('TrivForumBundle:Forum:delete.html.twig', array(			'advert' => $advert,			'form' => $form->createView()		));		}		throw new NotFoundHttpException("vous n'avez pas l'autorisation de surprimer ce post");		}     public function menuAction($limit)  {    $listAdverts = $this->getDoctrine()      ->getManager()      ->getRepository('TrivForumBundle:Forum')      ->findBy(        array(),                 // Pas de critère        array('date' => 'desc'), // On trie par date décroissante        $limit,                  // On sélectionne $limit annonces        0                        // À partir du premier    );    return $this->render('TrivForumBundle:Forum:menu.html.twig', array(      'listAdverts' => $listAdverts    ));	}       /**   * @Security("has_role('ROLE_USER')")   */       public function editAction($id, Request $request)  {     // On récupère l'EntityManager    $em = $this->getDoctrine()->getManager();    // On récupère l'entité correspondant à l'id $id    $advert = $em->getRepository('TrivForumBundle:Forum')->find($id); if( ($this->getUser() == $advert->getUser()) or ($this->get('security.context')->isGranted('ROLE_AUTEUR'))) {    // Si l'annonce n'existe pas, on affiche une erreur 404    if ($advert == null) {      throw $this->createNotFoundException("L'annonce d'id ".$id." n'existe pas.");    }     $form = $this->createForm(new ForumEditType(), $advert);	 	if ($form->handleRequest($request)->isValid()) {             // Inutile de persister ici, Doctrine connait déjà notre annonce            $em->flush();         $request->getSession()->getFlashBag()->add('notice', 'Annonce bien modifiée.');      return $this->redirect($this->generateUrl('Triv_Forum_view', array('id' => $advert->getId())));       } 	     return $this->render('TrivForumBundle:Forum:edit.html.twig', array(      'advert' => $advert,	  'form' => $form->createView()    ));	}	throw new NotFoundHttpException("vous n'avez pas l'autorisation de modifier ce post");	}   public function viewLastAction(Request $request)  {   $application = new Commentaire();    $form = $this->createForm(new CommentaireType(), $application);    // On récupère notre objet Paginator    $listAdverts = $this->getDoctrine()      ->getManager()      ->getRepository('TrivForumBundle:Forum')      ->findBy(array(),               array('date' => 'desc'),               1,               0)			  ;				   $advert = $listAdverts[0];    if ($advert === null) {      throw $this->createNotFoundException("L'annonce d'id ".$id." n'existe pas.");    }	$user_id = $this->getUser()->getId();  if ($form->handleRequest($request)->isValid()) {	  $user = $this->getUser();	  $application->setAuthor($user);	  $application->setUser($user);	  $application->setAdvert($advert);      $em = $this->getDoctrine()->getManager();      $em->persist($application);      $em->flush();	        return $this->redirect($this->generateUrl('Triv_Forum_view', array('id' => $advert->getId())));    }      $repositoryApp = $this               ->getDoctrine()               ->getManager()               ->getRepository('TrivForumBundle:Commentaire')  ;	 	 $listApplications = $repositoryApp->findBy(		array('advert' => $advert),      // Critere		array('date' => 'desc')          // Tri);    // Puis modifiez la ligne du render comme ceci, pour prendre en compte les variables :    return $this->render('TrivForumBundle:Forum:view.html.twig', array(	  'user_id'          => $user_id,       'advert'           => $advert,	  'form'             => $form->createView(),	  'listApplications' =>$listApplications,    ));	    // On donne toutes les informations nécessaires à la vue    return $this->render('TrivForumBundle:Forum:view.html.twig', array(      'lastAdvert' => $advert,    ));  }   public function comdeleteAction($id, Request $request)  {    // On récupère l'EntityManager    $em = $this->getDoctrine()->getManager();    // On récupère l'entité correspondant à l'id $id    $commentaire = $em->getRepository('TrivForumBundle:Commentaire')->find($id);    // Si le commentaire n'existe pas, on affiche une erreur 404    if ($commentaire == null) {      throw $this->createNotFoundException("Le commentaire d'id ".$id." n'existe pas.");    }    if ($request->isMethod('POST')) {      // Si la requête est en POST, on deletea le commentaire      $request->getSession()->getFlashBag()->add('info', 'Commentaire bien supprimée.');      $em->remove($commentaire);			$em->flush();      // Puis on redirige vers l'accueil      return $this->redirect($this->generateUrl('triv_forum_home'));    }    // Si la requête est en GET, on affiche une page de confirmation avant de delete    return $this->render('TrivForumBundle:Forum:comdelete.html.twig', array(      'commentaire' => $commentaire    ));  }          /**   * @Security("has_role('ROLE_USER')")   */    public function voteforumAction($ref,$ref_id,$vote, Request $request)  {	  $user = $this->getUser();    	if($request->getMethod() != 'POST'){		http_response_code(403);		die();	}	if($user->getId() == null){		http_response_code(403);		die('vous devez être connecté pour voter');	}	       $vot = new Vote();       $em = $this->getDoctrine()->getManager();	   $advert = $em->getRepository('TrivForumBundle:Forum')->find($ref_id);    // On vérifie que l'annonce avec cet id existe bien    if ($advert === null) {      throw $this->createNotFoundException("L'annonce d'id ".$ref_id." n'existe pas.");    }				  if($vote == 1){		 $success = $this->like($ref,$ref_id,$user->getId(),$vot);	  }else{		$success = $this->dislike($ref,$ref_id,$user->getId(),$vot);	  	  }	    		$advert->setLikeCount($this->updateVote($ref,$ref_id,1));	    $advert->setDisLikeCount($this->updateVote($ref,$ref_id,-1));		$em->flush();				header('Content-type: application/json');				$req = array(		'like_count' =>	$advert->getLikeCount(),		'dislike_count' =>	$advert->getDisLikeCount()		);		$record = $req;		$record['success'] = $success;		die(json_encode($record));	return true;	}       /**   * @Security("has_role('ROLE_USER')")   */      public function votecomAction($ref,$ref_id,$vote, Request $request)  {	  $user = $this->getUser();    	if($request->getMethod() != 'POST'){		http_response_code(403);		die();	}	if($user->getId() == null){		http_response_code(403);		die('vous devez être connecté pour voter');	}	       $vot = new Vote();       $em = $this->getDoctrine()->getManager();	   $com = $em->getRepository('TrivForumBundle:Commentaire')->find($ref_id);    // On vérifie que l'annonce avec cet id existe bien    if ($com === null) {      throw $this->createNotFoundException("Le commentaire d'id ".$ref_id." n'existe pas.");    }				  if($vote == 1){		 $success = $this->like($ref,$ref_id,$user->getId(),$vot);	  }else{		$success = $this->dislike($ref,$ref_id,$user->getId(),$vot);	  	  }	    		$com->setLikeCount($this->updateVote($ref,$ref_id,1));	    $com->setDisLikeCount($this->updateVote($ref,$ref_id,-1));		$em->flush();				header('Content-type: application/json');				$req = array(		'like_countcom' =>	$com->getLikeCount(),		'dislike_countcom' =>	$com->getDisLikeCount()		);		$record = $req;		$record['success'] = $success;		die(json_encode($record));	   return true;	}    public function classAction($id, Request $request)  {      $typcom = null;    $user = $this->getUser();	$em = $this->getDoctrine()->getManager();		// utilisateur actuel a like le commentaire?    $vote = false;	if(null !==($request->getSession('user_id'))){		$choix = $em->getRepository('TrivCoreBundle:Vote')->findoneBy(array('ref' => 'com','refId' => $id,'userId' => $user->getId())	);	}    	  if(null !==$choix){		$vote = $choix->getVote();	  //retourne la classe is-liked ou is-disliked	  $typcom = $this->getClass($vote);	  	  }   	    return $this->render('TrivForumBundle:Forum:isliked.html.twig', array(      'typcom' => $typcom    ));    }        public function like($ref,$ref_id,$user_id,$vot){		  $em = $this->getDoctrine()->getManager();	    $vote = null;		$vote = $em->getRepository('TrivCoreBundle:Vote')->findoneBy(array('ref' => $ref,'refId' => $ref_id,'userId' => $user_id)	);	if(null !==$vote){				if($vote->getVote() == -1){			$vote->setVote(1);			$vote->setCreatedAt(new \Datetime());			$em->flush();						return true;		}		    $em->remove($vote);			$em->flush();				return false;		 	}    		  		  		  $vot->setRef($ref);		  $vot->setRefId($ref_id);		  $vot->setVote(1);		  $vot->setUserId($user_id);		  $em = $this->getDoctrine()->getManager();		  $em->persist($vot);		  $em->flush();		  		  return true;			  	  }	  	    public function dislike($ref,$ref_id,$user_id,$vot){			$em = $this->getDoctrine()->getManager();	    $vote = null;		$vote = $em->getRepository('TrivCoreBundle:Vote')->findoneBy(array('ref' => $ref,'refId' => $ref_id,'userId' => $user_id)	);	if(null !==$vote){				if($vote->getVote() == 1){			$vote->setVote(-1);			$vote->setCreatedAt(new \Datetime());			$em->flush();							return true;		}				    $em->remove($vote);			$em->flush();					return false;		 	}    		      $vot->setRef($ref);			  $vot->setRefId($ref_id);			  $vot->setVote(-1);			  $vot->setUserId($user_id);			  $em = $this->getDoctrine()->getManager();			  $em->persist($vot);			  $em->flush();		  		      return true;	  }	           /**		 * permet d'ajouter une classe is-liked ou is-disliked		 *		 * @param $vote mixed false/PDRow		 */            public  function getClass($vote){		      if($vote){				  return $vote == 1 ? 'is-liked' : 'is-disliked' ;			  }			   return null;		      	  }	  	   public  function updateVote($ref,$ref_id ,$vote){		             $em = $this->getDoctrine()->getManager();		   return   $nbvote = $em->getRepository('TrivCoreBundle:Vote')->getNb($ref,$ref_id,$vote);	      	  }    }