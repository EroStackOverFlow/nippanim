<?php// src/Triv/AnimesBundle/Controller/AnimesController.phpnamespace Triv\AnimesBundle\Controller;use Triv\AnimesBundle\Entity\Animes;use Triv\AnimesBundle\Entity\Episodes;use Triv\AnimesBundle\Entity\AnimesImage;use Triv\AnimesBundle\Entity\AnimesCommentaire;use Triv\CoreBundle\Entity\Vote;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;use Triv\AnimesBundle\Form\AnimesType;use Triv\AnimesBundle\Form\EpisodesType;use Triv\AnimesBundle\Form\AnimesEditType;use Triv\AnimesBundle\Form\EpisodesEditType;use Triv\AnimesBundle\Form\AnimesCommentaireType;use Symfony\Component\Security\Core\Exception\AccessDeniedException;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;class AnimesController extends Controller{  public function indexAction($page)  {      if ($page < 1) {      throw $this->createNotFoundException("La page ".$page." n'existe pas.");    }      $titrePage = "LISTE DES ANIMES";      $nbPerPage = $this->container->getParameter('nb_anime_per_page');    // On récupère notre objet Paginator    $listAnime = $this->getDoctrine()      ->getManager()      ->getRepository('TrivAnimesBundle:Animes')      ->getAnimes($page, $nbPerPage)    ;    // On calcule le nombre total de pages grâce au count($listAdverts) qui retourne le nombre total d'annonces    $nbPages = ceil(count($listAnime)/$nbPerPage);    // Si la page n'existe pas, on retourne une 404    if ($page > $nbPages) {     	  return $this->redirect($this->generateUrl('Triv_Animes_add'));    }     // On donne toutes les informations nécessaires à la vue    return $this->render('TrivAnimesBundle:Animes:index.html.twig', array(      'listAnime' => $listAnime,      'nbPages'     => $nbPages,      'page'        => $page,	  'titrePage'        =>$titrePage    ));  }  public function index1Action($page)  {    if ($page < 1) {      throw $this->createNotFoundException("La page ".$page." n'existe pas.");    }      $nbPerPage = $this->container->getParameter('nb_anime_per_page');	  $titrePage = "CRITIQUES MANGAS";	    // On récupère notre objet Paginator    $listAnime = $this->getDoctrine()      ->getManager()      ->getRepository('TrivAnimesBundle:Animes')      ->getAnimesUn($page, $nbPerPage)    ;    // On calcule le nombre total de pages grâce au count($listAdverts) qui retourne le nombre total d'annonces    $nbPages = ceil(count($listAnime)/$nbPerPage);    // Si la page n'existe pas, on retourne une 404    if ($page > $nbPages) {     	  return $this->redirect($this->generateUrl('Triv_Animes_add'));    }     // On donne toutes les informations nécessaires à la vue    return $this->render('TrivAnimesBundle:Animes:index.html.twig', array(      'listAnime' => $listAnime,      'nbPages'     => $nbPages,      'page'        => $page,	  'titrePage'   =>$titrePage    ));  }   public function index2Action($page)  {    if ($page < 1) {      throw $this->createNotFoundException("La page ".$page." n'existe pas.");    }      $nbPerPage = $this->container->getParameter('nb_anime_per_page');	  $titrePage = "Films et OAV";    // On récupère notre objet Paginator    $listAnime = $this->getDoctrine()      ->getManager()      ->getRepository('TrivAnimesBundle:Animes')      ->getAnimesDeux($page, $nbPerPage)    ;    // On calcule le nombre total de pages grâce au count($listAdverts) qui retourne le nombre total d'annonces    $nbPages = ceil(count($listAnime)/$nbPerPage);    // Si la page n'existe pas, on retourne une 404    if ($page > $nbPages) {     	  return $this->redirect($this->generateUrl('Triv_Animes_add'));    }     // On donne toutes les informations nécessaires à la vue    return $this->render('TrivAnimesBundle:Animes:index.html.twig', array(      'listAnime' => $listAnime,      'nbPages'     => $nbPages,      'page'        => $page,	  'titrePage'        =>$titrePage    ));  }   public function index3Action($page)  {    if ($page < 1) {      throw $this->createNotFoundException("La page ".$page." n'existe pas.");    }      $nbPerPage = $this->container->getParameter('nb_anime_per_page');      $titrePage = "ANIMES SERIES";	       // On récupère notre objet Paginator    $listAnime = $this->getDoctrine()      ->getManager()      ->getRepository('TrivAnimesBundle:Animes')      ->getAnimesTrois($page, $nbPerPage)    ;    // On calcule le nombre total de pages grâce au count($listAdverts) qui retourne le nombre total d'annonces    $nbPages = ceil(count($listAnime)/$nbPerPage);    // Si la page n'existe pas, on retourne une 404    if ($page > $nbPages) {     	  return $this->redirect($this->generateUrl('Triv_Animes_add'));    }     // On donne toutes les informations nécessaires à la vue    return $this->render('TrivAnimesBundle:Animes:index.html.twig', array(      'listAnime' => $listAnime,      'nbPages'     => $nbPages,      'page'        => $page,	  'titrePage'        =>$titrePage    ));  }  public function viewAction($id, Request $request)  {      $commentaire = new AnimesCommentaire();    $form = $this->createForm(new AnimesCommentaireType(), $commentaire );    	$typ = null;	$choix = null;	$user = $this->getUser();	  		  $em = $this->getDoctrine()->getManager();	// utilisateur actuel a vote?    $vote = false;	if(null !==($request->getSession('user_id')) and (null !== $user) ){		$choix = $em->getRepository('TrivCoreBundle:Vote')->findoneBy(array('ref' => 'anime','refId' => $id,'userId' => $user->getId())	);	}    	  if(null !==$choix){		$vote = $choix->getVote();	  //retourne la classe is-liker ou is-disliked	  $typ = $this->getClass($vote);	  	  } 		  	        // On récupère l'EntityManager    $em = $this->getDoctrine()->getManager();	$em2 = $this->getDoctrine()->getManager();    // Pour récupérer une annonce unique : on utilise find()    $anime = $em->getRepository('TrivAnimesBundle:Animes')->find($id);    $episode = $em2->getRepository('TrivAnimesBundle:Episodes')	              ->findBy(                    array('anime' => $id),                 // Pas de critère					array('date' => 'asc'), // On trie par date décroissante					1000,                  // On sélectionne $limit annonces					0                        // À partir du premier					);      // On vérifie que l'annonce avec cet id existe bien    if ($anime === null) {      throw $this->createNotFoundException("L'anime d'id ".$id." n'existe pas.");    }  if ($form->handleRequest($request)->isValid()) {	 $user = $this->getUser();	  $commentaire->setAnime($anime);	  $commentaire->setAuthor($user);	  $commentaire->setUser($user);      $em = $this->getDoctrine()->getManager();      $em->persist($commentaire);      $em->flush();      return $this->redirect($this->generateUrl('Triv_Animes_view', array('id' => $anime->getId())));    }		  if ($anime->getLikeCount()+ $anime->getDisLikeCount() == 0) {	       $percent = 100;	   }	   else{	      $percent =  round(100 *($anime->getLikeCount()/ ($anime->getLikeCount()+ $anime->getDisLikeCount() )));	   } 		        $repositoryApp = $this               ->getDoctrine()               ->getManager()               ->getRepository('TrivAnimesBundle:AnimesCommentaire')  ;	 	 $listCommentaires = $repositoryApp->findBy(		array('anime' => $anime),      // Critere		array('date' => 'desc')          // Tri      );    // Puis modifiez la ligne du render comme ceci, pour prendre en compte les variables :    return $this->render('TrivAnimesBundle:Animes:view.html.twig', array(      'anime'           => $anime,	  'form'             => $form->createView(),	  'listCommentaires' =>$listCommentaires,	  'episode'          =>$episode,	  'typ'              =>$typ,	      'percent'          =>$percent,  	      ));		  }  /**   * @Security("has_role('ROLE_ADMIN')")   */  public function addAction(Request $request)   {             $anime = new Animes();   $form = $this->createForm(new AnimesType(), $anime);    if ($form->handleRequest($request)->isValid()) {	 	  $publieur = $this->getUser();	  $anime->setPublieur($publieur);      $em = $this->getDoctrine()->getManager();      $em->persist($anime);      $em->flush();      $request->getSession()->getFlashBag()->add('notice', 'Anime bien enregistrée.');      return $this->redirect($this->generateUrl('Triv_Animes_view', array('id' => $anime->getId())));    }    return $this->render('TrivAnimesBundle:Animes:add.html.twig', array(      'form' => $form->createView(),    ));  }   /**   * @Security("has_role('ROLE_ADMIN')")   */ public function deleteAction($id, Request $request)  {    // On récupère l'EntityManager    $em = $this->getDoctrine()->getManager();    // On récupère l'entité correspondant à l'id $id    $anime = $em->getRepository('TrivAnimesBundle:Animes')->find($id);    // Si l'annonce n'existe pas, on affiche une erreur 404    if ($anime == null) {      throw $this->createNotFoundException("L'anime d'id ".$id." n'existe pas.");    }    if ($request->isMethod('POST')) {      // Si la requête est en POST, on deletea l'article            $em->remove($anime);			$em->flush();			$request->getSession()->getFlashBag()->add('info', "Le post a bien été supprimée.");			return $this->redirect($this->generateUrl('triv_Animes_home'));      // Puis on redirige vers l'accueil          }    // Si la requête est en GET, on affiche une page de confirmation avant de delete    return $this->render('TrivAnimesBundle:Animes:delete.html.twig', array(      'anime' => $anime    ));  }  public function menuAction($limit)  {    $listEpisode = $this->getDoctrine()      ->getManager()      ->getRepository('TrivAnimesBundle:Episodes')      ->findBy(        array(),                 // Pas de critère        array('date' => 'desc'), // On trie par date décroissante        $limit,                  // On sélectionne $limit annonces        0                        // À partir du premier    );    return $this->render('TrivAnimesBundle:Animes:menu.html.twig', array(      'listEpisode' => $listEpisode    ));  }    /**   * @Security("has_role('ROLE_ADMIN')")   */      public function editAction($id, Request $request)  {     // On récupère l'EntityManager    $em = $this->getDoctrine()->getManager();    // On récupère l'entité correspondant à l'id $id    $anime = $em->getRepository('TrivAnimesBundle:Animes')->find($id);    // Si l'annonce n'existe pas, on affiche une erreur 404    if ($anime == null) {      throw $this->createNotFoundException("L'anime d'id ".$id." n'existe pas.");    }     $form = $this->createForm(new AnimesEditType(), $anime);	 	 if ($form->handleRequest($request)->isValid()) {      $em = $this->getDoctrine()->getManager();      $em->persist($anime);      $em->flush();	   return $this->redirect($this->generateUrl('Triv_Animes_view', array('id' => $anime->getId())));	  }	     return $this->render('TrivAnimesBundle:Animes:edit.html.twig', array(      'anime' => $anime,	  'form' => $form->createView()    ));}    /**   * @Security("has_role('ROLE_ADMIN')")   */ public function episodeAction($id, Request $request)   {             $episode = new Episodes();      $form = $this->createForm(new EpisodesType(), $episode);      $em = $this->getDoctrine()->getManager();      $idAnime =  $id;       if ($form->handleRequest($request)->isValid()) {	 	  $anime = $em->getRepository('TrivAnimesBundle:Animes')->find($id);      $publieur = $this->getUser();	  $episode->setPublieur($publieur);	  $episode->setAnime($anime);      $em = $this->getDoctrine()->getManager();      $em->persist($episode);      $em->flush();      $request->getSession()->getFlashBag()->add('notice', 'Episode bien enregistrée.');           return $this->redirect($this->generateUrl('Triv_Animes_view', array('id' => $idAnime)));    }    return $this->render('TrivAnimesBundle:Animes:addEpisode.html.twig', array(      'form' => $form->createView(),	  'idAnime' => $idAnime,    ));  }         public function lectureAction($id,$ep ,Request $request)  {      $commentaire = new AnimesCommentaire();    $form = $this->createForm(new AnimesCommentaireType(), $commentaire );        // On récupère l'EntityManager    $em = $this->getDoctrine()->getManager();	$em2 = $this->getDoctrine()->getManager();	$em3 = $this->getDoctrine()->getManager();    // Pour récupérer une annonce unique : on utilise find()    $anime = $em->getRepository('TrivAnimesBundle:Animes')->find($id);	$listEpisode = $em2->getRepository('TrivAnimesBundle:Episodes')	              ->findBy(                    array('anime' => $id),                 // Pas de critère					array('date' => 'asc'), // On trie par date décroissante					300,                  // On sélectionne $limit annonces					0                        // À partir du premier					);    $episode = $em3->getRepository('TrivAnimesBundle:Episodes')	              ->findOneBy(array('epversion' => $ep, 'anime' => $anime));	    // On vérifie que l'annonce avec cet id existe bien    if ($anime === null) {      throw $this->createNotFoundException("L'anime d'id ".$id." n'existe pas.");    }  if ($form->handleRequest($request)->isValid()) {	 	  $commentaire->setAnime($anime);      $em = $this->getDoctrine()->getManager();      $em->persist($commentaire);      $em->flush();      return $this->redirect($this->generateUrl('Triv_Animes_view', array('id' => $anime->getId())));    }      $repositoryApp = $this               ->getDoctrine()               ->getManager()               ->getRepository('TrivAnimesBundle:AnimesCommentaire')  ;	 	 $listCommentaires = $repositoryApp->findBy(		array('anime' => $anime),      // Critere		array('date' => 'desc')          // Tri);      // gestion des typ, typep, percent et percentep,  pour adapter l'affichage des like et dislike en fonction du user connecte    $typ = null;	$choix = null;	$user = $this->getUser();	  		  $em = $this->getDoctrine()->getManager();	// utilisateur actuel a vote?    $vote = false;	if(null !==($request->getSession('user_id')) and (null !== $user) ){		$choix = $em->getRepository('TrivCoreBundle:Vote')->findoneBy(array('ref' => 'anime','refId' => $id,'userId' => $user->getId())	);	}    	  if(null !==$choix){		$vote = $choix->getVote();	  //retourne la classe is-liker ou is-disliked	  $typ = $this->getClass($vote);	  	  }      	$typep = null;	$choixep = null;	$user = $this->getUser();	 // utilisateur actuel a vote?    $vote = false;	if(null !==($request->getSession('user_id')) and (null !== $user) ){		$choixep = $em->getRepository('TrivCoreBundle:Vote')->findoneBy(array('ref' => 'episode','refId' => $episode->getId(),'userId' => $user->getId())	);	}    	  if(null !==$choixep){		$vote = $choixep->getVote();	  //retourne la classe is-liker ou is-disliked	  $typep = $this->getClass($vote);	  	  } 	  	   if ($episode->getLikeCount()+ $episode->getDisLikeCount() == 0) {	       $percentep = 100;	   }	   else{	      $percentep =  round(100 *($episode->getLikeCount()/ ($episode->getLikeCount()+ $episode->getDisLikeCount() )));	   } 	   	    if ($anime->getLikeCount()+ $anime->getDisLikeCount() == 0) {	       $percent = 100;	   }	   else{	      $percent =  round(100 *($anime->getLikeCount()/ ($anime->getLikeCount()+ $anime->getDisLikeCount() )));	   } 	     // Puis modifiez la ligne du render comme ceci, pour prendre en compte les variables :    return $this->render('TrivAnimesBundle:Animes:lecture.html.twig', array(      'anime'           => $anime,	  'form'             => $form->createView(),	  'listCommentaires' =>$listCommentaires,	  'episode' 		 =>$episode,	  'listEpisode'      =>$listEpisode,	  'typep'              =>$typep,	  'percentep'          =>$percentep,      'typ'              =>$typ,	  'percent'          =>$percent, 	      ));		  }   /**   * @Security("has_role('ROLE_ADMIN')")   */  public function comdeleteAction($id, Request $request)  {        // On récupère l'EntityManager    $em = $this->getDoctrine()->getManager();    // On récupère l'entité correspondant à l'id $id    $commentaire = $em->getRepository('TrivAnimesBundle:AnimesCommentaire')->find($id);    // Si le commentaire n'existe pas, on affiche une erreur 404    if ($commentaire == null) {      throw $this->createNotFoundException("Le commentaire d'id ".$id." n'existe pas.");    }    if ($request->isMethod('POST')) {      // Si la requête est en POST, on deletea le commentaire      $request->getSession()->getFlashBag()->add('info', 'Commentaire bien supprimée.');      $em->remove($commentaire);			$em->flush();      // Puis on redirige vers l'accueil      return $this->redirect($this->generateUrl('triv_Animes_home'));    }    // Si la requête est en GET, on affiche une page de confirmation avant de delete    return $this->render('TrivAnimesBundle:Animes:comdelete.html.twig', array(      'commentaire' => $commentaire    ));  }   public function episodedeleteAction($id, $ep, Request $request)  {    // On récupère l'EntityManager    $em = $this->getDoctrine()->getManager();    // On récupère l'entité correspondant à l'id $id    $episode = $em->getRepository('TrivAnimesBundle:Episodes')	               ->findOneBy(array('anime' => $id, 'epversion'=> $ep));    // Si l'annonce n'existe pas, on affiche une erreur 404    if ($episode == null) {      throw $this->createNotFoundException("L'episode d'id ".$id." n'existe pas.");    }    if ($request->isMethod('POST')) {      // Si la requête est en POST, on delete l'article	        $em->remove($episode);			$em->flush();			$request->getSession()->getFlashBag()->add('info', "Le post a bien été supprimée.");			return $this->redirect($this->generateUrl('triv_Animes_home'));    }    // Si la requête est en GET, on affiche une page de confirmation avant de delete    return $this->render('TrivAnimesBundle:Animes:episodedelete.html.twig', array(      'episode' => $episode    ));  }         public function searchindexAction($page)  {    if ($page < 1) {      throw $this->createNotFoundException("La page ".$page." n'existe pas.");    }      $nbPerPage = $this->container->getParameter('nb_anime_per_page');      $search =  $this->getRequest()->query->get('s');	      // On récupère notre objet Paginator    $listAnime = $this->getDoctrine()      ->getManager()      ->getRepository('TrivAnimesBundle:Animes')      ->getAnimesSearch($page, $nbPerPage , $search)    ;    // On calcule le nombre total de pages grâce au count($listAdverts) qui retourne le nombre total d'annonces    $nbPages = ceil(count($listAnime)/$nbPerPage);     // On donne toutes les informations nécessaires à la vue    return $this->render('TrivAnimesBundle:Animes:search.html.twig', array(      'listAnime' => $listAnime,      'nbPages'     => $nbPages,      'page'        => $page,	  'search'      => $search    ));  }   /**   * @Security("has_role('ROLE_ADMIN')")   */      public function episodeeditAction($id,$ep, Request $request)  {     // On récupère l'EntityManager    $em = $this->getDoctrine()->getManager();    // On récupère l'entité correspondant à l'id $id    $episode = $em->getRepository('TrivAnimesBundle:Episodes')->findOneBy(array('anime' => $id,	                                                                            'epversion' => $ep ));    // Si l'annonce n'existe pas, on affiche une erreur 404    if ($episode == null) {      throw $this->createNotFoundException("L'episode d'id ".$id." n'existe pas.");    }     $form = $this->createForm(new EpisodesEditType(), $episode);	 	 if ($form->handleRequest($request)->isValid()) {      $em = $this->getDoctrine()->getManager();      $em->persist($episode);      $em->flush();	   return $this->redirect($this->generateUrl('Triv_Animes_view', array('id' => $episode->getAnime()->getId())));	  }	     return $this->render('TrivAnimesBundle:Animes:episodeedit.html.twig', array(      'episode' => $episode,	  'form' => $form->createView()    ));}               public function voteanimeAction($ref,$ref_id,$vote, Request $request)  {	  $user = $this->getUser();    	if($request->getMethod() != 'POST'){		http_response_code(403);		die();	}	if($user == null){		http_response_code(403);		die('vous devez être connecté pour voter');	}	       $vot = new Vote();       $em = $this->getDoctrine()->getManager();	   $anime = $em->getRepository('TrivAnimesBundle:Animes')->find($ref_id);    // On vérifie que l'annonce avec cet id existe bien    if ($anime === null) {      throw $this->createNotFoundException("L'anime d'id ".$ref_id." n'existe pas.");    }				  if($vote == 1){		 $success = $this->like($ref,$ref_id,$user->getId(),$vot);	  }else{		$success = $this->dislike($ref,$ref_id,$user->getId(),$vot);	  	  }	    		$anime->setLikeCount($this->updateVote($ref,$ref_id,1));	    $anime->setDisLikeCount($this->updateVote($ref,$ref_id,-1));		$em->flush();					header('Content-type: application/json');		$anime->getLikeCount();		$req = array(		'like_count' =>	$anime->getLikeCount(),		'dislike_count' =>	$anime->getDisLikeCount()		);		$record = $req;		$record['success'] = $success;		die(json_encode($record));	return true;	}     public function voteepisodeAction($ref,$ref_id,$vote, Request $request)  {	  $user = $this->getUser();    	if($request->getMethod() != 'POST'){		http_response_code(403);		die();	}	if($user == null){		http_response_code(403);		die('vous devez être connecté pour voter');	}	       $vot = new Vote();       $em = $this->getDoctrine()->getManager();	   $episode = $em->getRepository('TrivAnimesBundle:Episodes')->find($ref_id);    // On vérifie que l'episode avec cet id existe bien    if ($episode === null) {      throw $this->createNotFoundException("L'episode d'id ".$ref_id." n'existe pas.");    }				  if($vote == 1){		 $success = $this->like($ref,$ref_id,$user->getId(),$vot);	  }else{		$success = $this->dislike($ref,$ref_id,$user->getId(),$vot);	  	  }	    		$episode->setLikeCount($this->updateVote($ref,$ref_id,1));	    $episode->setDisLikeCount($this->updateVote($ref,$ref_id,-1));		$em->flush();					header('Content-type: application/json');				$req = array(		'like_countep' =>	$episode->getLikeCount(),		'dislike_countep' =>	$episode->getDisLikeCount()		);		$record = $req;		$record['success'] = $success;		die(json_encode($record));	return true;	}    /**   * @Security("has_role('ROLE_USER')")   */    public function voteanimecomAction($ref,$ref_id,$vote, Request $request)  {	  $user = $this->getUser();    	if($request->getMethod() != 'POST'){		http_response_code(403);		die();	}	if($user->getId() == null){		http_response_code(403);		die('vous devez être connecté pour voter');	}	       $vot = new Vote();       $em = $this->getDoctrine()->getManager();	   $com = $em->getRepository('TrivAnimesBundle:AnimesCommentaire')->find($ref_id);    // On vérifie que l'annonce avec cet id existe bien    if ($com === null) {      throw $this->createNotFoundException("Le commentaire d'id ".$ref_id." n'existe pas.");    }				  if($vote == 1){		 $success = $this->like($ref,$ref_id,$user->getId(),$vot);	  }else{		$success = $this->dislike($ref,$ref_id,$user->getId(),$vot);	  	  }	    		$com->setLikeCount($this->updateVote($ref,$ref_id,1));	    $com->setDisLikeCount($this->updateVote($ref,$ref_id,-1));		$em->flush();		header('Content-type: application/json');				$req = array(		'like_countcom' =>	$com->getLikeCount(),		'dislike_countcom' =>	$com->getDisLikeCount()		);		$record = $req;		$record['success'] = $success;		die(json_encode($record));	   return true;	}            public function like($ref,$ref_id,$user_id,$vot){		  $em = $this->getDoctrine()->getManager();	    $vote = false;		$vote = $em->getRepository('TrivCoreBundle:Vote')->findoneBy(array('ref' => $ref,'refId' => $ref_id,'userId' => $user_id)	);	if(null !==$vote){				if($vote->getVote() == -1){			$vote->setVote(1);			$vote->setCreatedAt(new \Datetime());			$em->flush();						return true;		}				    $em->remove($vote);			$em->flush();				return false;		 	}    		  		  		  $vot->setRef($ref);		  $vot->setRefId($ref_id);		  $vot->setVote(1);		  $vot->setUserId($user_id);		  $em = $this->getDoctrine()->getManager();		  $em->persist($vot);		  $em->flush();		  		  return true;			  	  }	  	    public function dislike($ref,$ref_id,$user_id,$vot){			$em = $this->getDoctrine()->getManager();	    $vote = false;		$vote = $em->getRepository('TrivCoreBundle:Vote')->findoneBy(array('ref' => $ref,'refId' => $ref_id,'userId' => $user_id)	);	if(null !==$vote){				if($vote->getVote() == 1){			$vote->setVote(-1);			$vote->setCreatedAt(new \Datetime());			$em->flush();							return true;		}				    $em->remove($vote);			$em->flush();					return false;		 	}    		      $vot->setRef($ref);			  $vot->setRefId($ref_id);			  $vot->setVote(-1);			  $vot->setUserId($user_id);			  $em = $this->getDoctrine()->getManager();			  $em->persist($vot);			  $em->flush();		  		      return true;	  }	           /**		 * permet d'ajouter une classe is-liked ou is-disliked		 *		 * @param $vote mixed false/PDRow		 */            public  function getClass($vote){		      if($vote){				  return $vote == 1 ? 'is-liked' : 'is-disliked' ;			  }			   return null;		      	  }	  	   public  function updateVote($ref,$ref_id ,$vote){		             $em = $this->getDoctrine()->getManager();		   return   $nbvote = $em->getRepository('TrivCoreBundle:Vote')->getNb($ref,$ref_id,$vote);	      	  }    }