<?php// src/Triv/AnimesBundle/Controller/CritiqueAnimesController.phpnamespace Triv\AnimesBundle\Controller;use Triv\AnimesBundle\Entity\CritiqueAnimes;use Triv\AnimesBundle\Entity\CritiqueEpisodes;use Triv\AnimesBundle\Entity\CritiqueAnimesImage;use Triv\AnimesBundle\Entity\CritiqueAnimesCommentaire;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;use Triv\AnimesBundle\Form\CritiqueAnimesType;use Triv\AnimesBundle\Form\CritiqueEpisodesType;use Triv\AnimesBundle\Form\CritiqueAnimesEditType;use Triv\AnimesBundle\Form\CritiqueAnimesCommentaireType;use Symfony\Component\Security\Core\Exception\AccessDeniedException;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;class CritiqueAnimesController extends Controller{    public function indexAction($page)  {    if ($page < 1) {      throw $this->createNotFoundException("La page ".$page." n'existe pas.");    }      $nbPerPage = $this->container->getParameter('nb_anime_per_page');    // On récupère notre objet Paginator    $listAnime = $this->getDoctrine()      ->getManager()      ->getRepository('TrivAnimesBundle:CritiqueAnimes')      ->getAnimes($page, $nbPerPage)    ;    // On calcule le nombre total de pages grâce au count($listAdverts) qui retourne le nombre total d'annonces    $nbPages = ceil(count($listAnime)/$nbPerPage);    // Si la page n'existe pas, on retourne une 404    if ($page > $nbPages) {     	  return $this->redirect($this->generateUrl('Triv_CritiqueAnimes_add'));    }    // On donne toutes les informations nécessaires à la vue    return $this->render('TrivAnimesBundle:CritiquesAnimes:index.html.twig', array(      'listAnime' => $listAnime,      'nbPages'     => $nbPages,      'page'        => $page    ));  }    public function viewAction($id, Request $request)  {      $commentaire = new CritiqueAnimesCommentaire();    $form = $this->createForm(new CritiqueAnimesCommentaireType(), $commentaire );        // On récupère l'EntityManager    $em = $this->getDoctrine()->getManager();	$em2 = $this->getDoctrine()->getManager();    // Pour récupérer une annonce unique : on utilise find()    $anime = $em->getRepository('TrivAnimesBundle:CritiqueAnimes')->find($id);    $episode = $em2->getRepository('TrivAnimesBundle:CritiqueEpisodes')	              ->findBy(                    array('anime' => $id),                 // Pas de critère					array('date' => 'asc'), // On trie par date décroissante					1000,                  // On sélectionne $limit annonces					0                        // À partir du premier					);      // On vérifie que l'annonce avec cet id existe bien    if ($anime === null) {      throw $this->createNotFoundException("L'anime d'id ".$id." n'existe pas.");    }  if ($form->handleRequest($request)->isValid()) {	 $user = $this->getUser();	  $commentaire->setAnime($anime);	  $commentaire->setAuthor($user);	  $commentaire->setUser($user);      $em = $this->getDoctrine()->getManager();      $em->persist($commentaire);      $em->flush();      return $this->redirect($this->generateUrl('Triv_CritiqueAnimes_view', array('id' => $anime->getId())));    }      $repositoryApp = $this               ->getDoctrine()               ->getManager()               ->getRepository('TrivAnimesBundle:CritiqueAnimesCommentaire')  ;	 	 $listCommentaires = $repositoryApp->findBy(		array('anime' => $anime),      // Critere		array('date' => 'desc')          // Tri);    // Puis modifiez la ligne du render comme ceci, pour prendre en compte les variables :    return $this->render('TrivAnimesBundle:CritiqueAnimes:view.html.twig', array(      'anime'           => $anime,	  'form'             => $form->createView(),	  'listCommentaires' =>$listCommentaires,	  'episode'          =>$episode    ));		  }  /**   * @Security("has_role('ROLE_ADMIN')")   */  public function addAction(Request $request)   {             $anime = new CritiqueAnimes();   $form = $this->createForm(new CritiqueAnimesType(), $anime);    if ($form->handleRequest($request)->isValid()) {	 	  $publieur = $this->getUser();	  $anime->setPublieur($publieur);      $em = $this->getDoctrine()->getManager();      $em->persist($anime);      $em->flush();      $request->getSession()->getFlashBag()->add('notice', 'Anime bien enregistrée.');      return $this->redirect($this->generateUrl('Triv_CritiqueAnimes_view', array('id' => $anime->getId())));    }    return $this->render('TrivAnimesBundle:CritiqueAnimes:add.html.twig', array(      'form' => $form->createView(),    ));  }   /**   * @Security("has_role('ROLE_ADMIN')")   */ public function deleteAction($id, Request $request)  {    // On récupère l'EntityManager    $em = $this->getDoctrine()->getManager();    // On récupère l'entité correspondant à l'id $id    $anime = $em->getRepository('TrivAnimesBundle:Animes')->find($id);    // Si l'annonce n'existe pas, on affiche une erreur 404    if ($anime == null) {      throw $this->createNotFoundException("L'anime d'id ".$id." n'existe pas.");    }    if ($request->isMethod('POST')) {      // Si la requête est en POST, on deletea l'article      $request->getSession()->getFlashBag()->add('info', 'Anime bien supprimé.');      // Puis on redirige vers l'accueil      return $this->redirect($this->generateUrl('Triv_Animes_home'));    }    // Si la requête est en GET, on affiche une page de confirmation avant de delete    return $this->render('TrivAnimesBundle:Animes:delete.html.twig', array(      'anime' => $anime    ));  }  public function menuAction($limit = 8)  {    $listAnimes = $this->getDoctrine()      ->getManager()      ->getRepository('TrivAnimesBundle:Animes')      ->findBy(        array(),                 // Pas de critère        array('date' => 'desc'), // On trie par date décroissante        $limit,                  // On sélectionne $limit annonces        0                        // À partir du premier    );    return $this->render('TrivAnimesBundle:Animes:menu.html.twig', array(      'listAnimes' => $listAnimes    ));  }    /**   * @Security("has_role('ROLE_ADMIN')")   */      public function editAction($id, Request $request)  {     // On récupère l'EntityManager    $em = $this->getDoctrine()->getManager();    // On récupère l'entité correspondant à l'id $id    $anime = $em->getRepository('TrivAnimesBundle:Animes')->find($id);    // Si l'annonce n'existe pas, on affiche une erreur 404    if ($anime == null) {      throw $this->createNotFoundException("L'anime d'id ".$id." n'existe pas.");    }     $form = $this->createForm(new AnimesEditType(), $anime);	 	 if ($form->handleRequest($request)->isValid()) {      $em = $this->getDoctrine()->getManager();      $em->persist($anime);      $em->flush();	   return $this->redirect($this->generateUrl('Triv_Animes_view', array('id' => $anime->getId())));	  }	     return $this->render('TrivAnimesBundle:Animes:edit.html.twig', array(      'anime' => $anime,	  'form' => $form->createView()    ));}    /**   * @Security("has_role('ROLE_ADMIN')")   */ public function episodeAction($id, Request $request)   {             $episode = new CritiqueEpisodes();      $form = $this->createForm(new CritiqueEpisodesType(), $episode);      $em = $this->getDoctrine()->getManager();      $idAnime =  $id;       if ($form->handleRequest($request)->isValid()) {	 	  $anime = $em->getRepository('TrivAnimesBundle:CritiqueAnimes')->find($id);      $publieur = $this->getUser();	  $episode->setPublieur($publieur);	  $episode->setAnime($anime);	  $episode->increase();      $em = $this->getDoctrine()->getManager();      $em->persist($episode);      $em->flush();      $request->getSession()->getFlashBag()->add('notice', 'Episode bien enregistrée.');           return $this->redirect($this->generateUrl('Triv_CritiqueAnimes_view', array('id' => $idAnime)));    }    return $this->render('TrivAnimesBundle:CritiqueAnimes:addEpisode.html.twig', array(      'form' => $form->createView(),	  'idAnime' => $idAnime,    ));  }         public function lectureAction($id,$ep ,Request $request)  {      $commentaire = new CritiqueAnimesCommentaire();    $form = $this->createForm(new CritiqueAnimesCommentaireType(), $commentaire );        // On récupère l'EntityManager    $em = $this->getDoctrine()->getManager();	$em2 = $this->getDoctrine()->getManager();	$em3 = $this->getDoctrine()->getManager();    // Pour récupérer une annonce unique : on utilise find()    $anime = $em->getRepository('TrivAnimesBundle:CritiqueAnimes')->find($id);	$listEpisode = $em2->getRepository('TrivAnimesBundle:CritiqueEpisodes')	              ->findBy(                    array('anime' => $id),                 // Pas de critère					array('date' => 'asc'), // On trie par date décroissante					300,                  // On sélectionne $limit annonces					0                        // À partir du premier					);    $episode = $em3->getRepository('TrivAnimesBundle:CritiqueEpisodes')	              ->findOneBy(array('title' => $ep, 'anime' => $anime));	    // On vérifie que l'annonce avec cet id existe bien    if ($anime === null) {      throw $this->createNotFoundException("L'anime d'id ".$id." n'existe pas.");    }  if ($form->handleRequest($request)->isValid()) {	 	  $commentaire->setAnime($anime);      $em = $this->getDoctrine()->getManager();      $em->persist($commentaire);      $em->flush();      return $this->redirect($this->generateUrl('Triv_CritiqueAnimes_view', array('id' => $anime->getId())));    }      $repositoryApp = $this               ->getDoctrine()               ->getManager()               ->getRepository('TrivAnimesBundle:AnimesCommentaire')  ;	 	 $listCommentaires = $repositoryApp->findBy(		array('anime' => $anime),      // Critere		array('date' => 'desc')          // Tri);    // Puis modifiez la ligne du render comme ceci, pour prendre en compte les variables :    return $this->render('TrivAnimesBundle:Animes:lecture.html.twig', array(      'anime'           => $anime,	  'form'             => $form->createView(),	  'listCommentaires' =>$listCommentaires,	  'episode' 		 =>$episode,	  'listEpisode'      =>$listEpisode    ));		  }   /**   * @Security("has_role('ROLE_ADMIN')")   */  public function comdeleteAction($id, Request $request)  {    // On récupère l'EntityManager    $em = $this->getDoctrine()->getManager();    // On récupère l'entité correspondant à l'id $id    $commentaire = $em->getRepository('TrivAnimesBundle:AnimesCommentaire')->find($id);    // Si le commentaire n'existe pas, on affiche une erreur 404    if ($commentaire == null) {      throw $this->createNotFoundException("Le commentaire d'id ".$id." n'existe pas.");    }    if ($request->isMethod('POST')) {      // Si la requête est en POST, on deletea le commentaire      $request->getSession()->getFlashBag()->add('info', 'Commentaire bien supprimée.');      $em->remove($commentaire);			$em->flush();      // Puis on redirige vers l'accueil      return $this->redirect($this->generateUrl('triv_Animes_home'));    }    // Si la requête est en GET, on affiche une page de confirmation avant de delete    return $this->render('TrivAnimesBundle:Animes:comdelete.html.twig', array(      'commentaire' => $commentaire    ));  }   public function episodedeleteAction($id, $ep, Request $request)  {    // On récupère l'EntityManager    $em = $this->getDoctrine()->getManager();    // On récupère l'entité correspondant à l'id $id    $episode = $em->getRepository('TrivAnimesBundle:Episodes')	               ->findOneBy(array('anime' => $id, 'epversion'=> $ep));    // Si l'annonce n'existe pas, on affiche une erreur 404    if ($episode == null) {      throw $this->createNotFoundException("L'episode d'id ".$id." n'existe pas.");    }    if ($request->isMethod('POST')) {      // Si la requête est en POST, on delete l'article	        $episode->decrease();            $em->remove($episode);			$em->flush();			$request->getSession()->getFlashBag()->add('info', "Le post a bien été supprimée.");			return $this->redirect($this->generateUrl('triv_Animes_home'));    }    // Si la requête est en GET, on affiche une page de confirmation avant de delete    return $this->render('TrivAnimesBundle:Animes:episodedelete.html.twig', array(      'episode' => $episode    ));  }  }